/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.10.1
 *
 */

import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services



export function registerNumOp(...args) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "op",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "identity" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "n" : {
                            "tag" : "scalar",
                            "name" : "u64"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "i64"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      




export function registerLogger(...args) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "logger",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "log" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "s" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "nil"
                }
            },
            "logCall" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "s" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "nil"
                }
            },
            "logWorker" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "w" : {
                            "tag" : "struct",
                            "name" : "Record",
                            "fields" : {
                                "metadata" : {
                                    "tag" : "struct",
                                    "name" : "RecordMetadata",
                                    "fields" : {
                                        "relay_id" : {
                                            "tag" : "array",
                                            "type" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        },
                                        "issued_by" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "peer_id" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "timestamp_issued" : {
                                            "tag" : "scalar",
                                            "name" : "u64"
                                        },
                                        "service_id" : {
                                            "tag" : "array",
                                            "type" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        },
                                        "value" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "key_id" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "solution" : {
                                            "tag" : "array",
                                            "type" : {
                                                "tag" : "scalar",
                                                "name" : "u8"
                                            }
                                        },
                                        "issuer_signature" : {
                                            "tag" : "array",
                                            "type" : {
                                                "tag" : "scalar",
                                                "name" : "u8"
                                            }
                                        }
                                    }
                                },
                                "signature" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "scalar",
                                        "name" : "u8"
                                    }
                                },
                                "timestamp_created" : {
                                    "tag" : "scalar",
                                    "name" : "u64"
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "nil"
                }
            }
        }
    }
}
    );
}
      




export function registerCounter(...args) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "counter",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "incrementAndReturn" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "u32"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      




export function registerQuorumChecker(...args) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "quorum",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "check" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "results" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "JsonString",
                                "fields" : {
                                    "error" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "success" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    },
                                    "value" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "minResults" : {
                            "tag" : "scalar",
                            "name" : "u32"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "QuorumResult",
                            "fields" : {
                                "error" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "results" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "JsonString",
                                        "fields" : {
                                            "error" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "success" : {
                                                "tag" : "scalar",
                                                "name" : "bool"
                                            },
                                            "value" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        }
                                    }
                                },
                                "value" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions

export function roundRobinEth(...args) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                                (call %init_peer_id% ("getDataSrv" "uris") [] uris)
                               )
                               (call %init_peer_id% ("getDataSrv" "method") [] method)
                              )
                              (call %init_peer_id% ("getDataSrv" "jsonArgs") [] jsonArgs)
                             )
                             (call %init_peer_id% ("getDataSrv" "serviceId") [] serviceId)
                            )
                            (call %init_peer_id% ("getDataSrv" "counterServiceId") [] counterServiceId)
                           )
                           (call %init_peer_id% ("getDataSrv" "counterPeerId") [] counterPeerId)
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (xor
                          (call counterPeerId (counterServiceId "incrementAndReturn") [] requestNumber)
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                          )
                         )
                        )
                        (xor
                         (seq
                          (seq
                           (seq
                            (ap uris uris_to_functor)
                            (ap uris_to_functor.length uris_length)
                           )
                           (call %init_peer_id% ("math" "rem") [requestNumber uris_length] rem)
                          )
                          (call %init_peer_id% ("logger" "logCall") [uris.$.[rem]!])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                        )
                       )
                       (xor
                        (call -relay- (serviceId "eth_call") [uris.$.[rem]! method jsonArgs] res)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "roundRobinEth",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "uris" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "method" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "jsonArgs" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "serviceId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "counterServiceId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "counterPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "JsonString",
                    "fields" : {
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "value" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}


export function empty(...args) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (call %init_peer_id% ("json" "obj") ["error" "" "success" true "value" ""] JsonString_obj)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [JsonString_obj])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "empty",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "JsonString",
                    "fields" : {
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "value" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}


export function quorumEth(...args) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                               (call %init_peer_id% ("getDataSrv" "uris") [] uris)
                              )
                              (call %init_peer_id% ("getDataSrv" "quorumNumber") [] quorumNumber)
                             )
                             (call %init_peer_id% ("getDataSrv" "timeout") [] timeout)
                            )
                            (call %init_peer_id% ("getDataSrv" "method") [] method)
                           )
                           (call %init_peer_id% ("getDataSrv" "jsonArgs") [] jsonArgs)
                          )
                          (call %init_peer_id% ("getDataSrv" "serviceId") [] serviceId)
                         )
                         (call %init_peer_id% ("getDataSrv" "quorumServiceId") [] quorumServiceId)
                        )
                        (call %init_peer_id% ("getDataSrv" "quorumPeerId") [] quorumPeerId)
                       )
                       (new $results
                        (seq
                         (seq
                          (seq
                           (xor
                            (par
                             (fold uris uri-0
                              (par
                               (seq
                                (seq
                                 (xor
                                  (call -relay- (serviceId "eth_call") [uri-0 method jsonArgs] res)
                                  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                 )
                                 (ap res $results)
                                )
                                (call %init_peer_id% ("op" "noop") [])
                               )
                               (next uri-0)
                              )
                              (never)
                             )
                             (null)
                            )
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                           )
                           (par
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (ap uris uris_to_functor)
                                  (ap uris_to_functor.length uris_length)
                                 )
                                 (call %init_peer_id% ("math" "sub") [uris_length 1] sub)
                                )
                                (new $results_test
                                 (seq
                                  (seq
                                   (seq
                                    (call %init_peer_id% ("math" "add") [sub 1] results_incr)
                                    (fold $results s
                                     (seq
                                      (seq
                                       (ap s $results_test)
                                       (canon %init_peer_id% $results_test  #results_iter_canon)
                                      )
                                      (xor
                                       (match #results_iter_canon.length results_incr
                                        (null)
                                       )
                                       (next s)
                                      )
                                     )
                                     (never)
                                    )
                                   )
                                   (canon %init_peer_id% $results_test  #results_result_canon)
                                  )
                                  (ap #results_result_canon results_gate)
                                 )
                                )
                               )
                               (ap uris uris_to_functor-0)
                              )
                              (ap uris_to_functor-0.length uris_length-0)
                             )
                             (call %init_peer_id% ("math" "sub") [uris_length-0 1] sub-0)
                            )
                            (call %init_peer_id% ("peer" "timeout") [timeout ""])
                           )
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (xor
                          (seq
                           (seq
                            (canon quorumPeerId $results  #results_canon)
                            (call quorumPeerId ("quorum" "check") [#results_canon quorumNumber] quorumResult)
                           )
                           (call -relay- ("op" "noop") [])
                          )
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [quorumResult])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "quorumEth",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "uris" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "quorumNumber" : {
                    "tag" : "scalar",
                    "name" : "u32"
                },
                "timeout" : {
                    "tag" : "scalar",
                    "name" : "u32"
                },
                "method" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "jsonArgs" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "serviceId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "quorumServiceId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "quorumPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "QuorumResult",
                    "fields" : {
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "results" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "JsonString",
                                "fields" : {
                                    "error" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "success" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    },
                                    "value" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "value" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}


export function randomLoadBalancing(...args) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "uris") [] uris)
                           )
                           (call %init_peer_id% ("getDataSrv" "method") [] method)
                          )
                          (call %init_peer_id% ("getDataSrv" "jsonArgs") [] jsonArgs)
                         )
                         (call %init_peer_id% ("getDataSrv" "serviceId") [] serviceId)
                        )
                        (xor
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("peer" "timestamp_sec") [] timestamp_sec)
                              (call %init_peer_id% ("op" "identity") [timestamp_sec] time)
                             )
                             (ap uris uris_to_functor)
                            )
                            (ap uris_to_functor.length uris_length)
                           )
                           (call %init_peer_id% ("math" "rem") [time uris_length] rem)
                          )
                          (call %init_peer_id% ("logger" "logCall") [uris.$.[rem]!])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                       (xor
                        (call %init_peer_id% ("callbackSrv" "callFunc") [uris.$.[rem]! method jsonArgs serviceId] init_call_res0)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [init_call_res0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "randomLoadBalancing",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "uris" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "method" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "jsonArgs" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "serviceId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "callFunc" : {
                    "tag" : "arrow",
                    "domain" : {
                        "tag" : "unlabeledProduct",
                        "items" : [
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            },
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        ]
                    },
                    "codomain" : {
                        "tag" : "unlabeledProduct",
                        "items" : [
                            {
                                "tag" : "struct",
                                "name" : "JsonString",
                                "fields" : {
                                    "error" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "success" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    },
                                    "value" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        ]
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "JsonString",
                    "fields" : {
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "value" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}


export function randomLoadBalancingEth(...args) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "uris") [] uris)
                           )
                           (call %init_peer_id% ("getDataSrv" "method") [] method)
                          )
                          (call %init_peer_id% ("getDataSrv" "jsonArgs") [] jsonArgs)
                         )
                         (call %init_peer_id% ("getDataSrv" "serviceId") [] serviceId)
                        )
                        (xor
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("peer" "timestamp_sec") [] timestamp_sec)
                              (call %init_peer_id% ("op" "identity") [timestamp_sec] time)
                             )
                             (ap uris uris_to_functor)
                            )
                            (ap uris_to_functor.length uris_length)
                           )
                           (call %init_peer_id% ("math" "rem") [time uris_length] rem)
                          )
                          (call %init_peer_id% ("logger" "logCall") [uris.$.[rem]!])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                       (xor
                        (call -relay- (serviceId "eth_call") [uris.$.[rem]! method jsonArgs] res)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "randomLoadBalancingEth",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "uris" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "method" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "jsonArgs" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "serviceId" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "JsonString",
                    "fields" : {
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "value" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}


export function quorum(...args) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                               (call %init_peer_id% ("getDataSrv" "uris") [] uris)
                              )
                              (call %init_peer_id% ("getDataSrv" "quorumNumber") [] quorumNumber)
                             )
                             (call %init_peer_id% ("getDataSrv" "timeout") [] timeout)
                            )
                            (call %init_peer_id% ("getDataSrv" "method") [] method)
                           )
                           (call %init_peer_id% ("getDataSrv" "jsonArgs") [] jsonArgs)
                          )
                          (call %init_peer_id% ("getDataSrv" "serviceId") [] serviceId)
                         )
                         (call %init_peer_id% ("getDataSrv" "quorumServiceId") [] quorumServiceId)
                        )
                        (call %init_peer_id% ("getDataSrv" "quorumPeerId") [] quorumPeerId)
                       )
                       (new $results
                        (seq
                         (seq
                          (seq
                           (xor
                            (par
                             (fold uris uri-0
                              (par
                               (seq
                                (seq
                                 (xor
                                  (call %init_peer_id% ("callbackSrv" "callFunc") [uri-0 method jsonArgs serviceId] init_call_res0)
                                  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                 )
                                 (ap init_call_res0 $results)
                                )
                                (call %init_peer_id% ("op" "noop") [])
                               )
                               (next uri-0)
                              )
                              (never)
                             )
                             (null)
                            )
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                           )
                           (par
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (ap uris uris_to_functor)
                                  (ap uris_to_functor.length uris_length)
                                 )
                                 (call %init_peer_id% ("math" "sub") [uris_length 1] sub)
                                )
                                (new $results_test
                                 (seq
                                  (seq
                                   (seq
                                    (call %init_peer_id% ("math" "add") [sub 1] results_incr)
                                    (fold $results s
                                     (seq
                                      (seq
                                       (ap s $results_test)
                                       (canon %init_peer_id% $results_test  #results_iter_canon)
                                      )
                                      (xor
                                       (match #results_iter_canon.length results_incr
                                        (null)
                                       )
                                       (next s)
                                      )
                                     )
                                     (never)
                                    )
                                   )
                                   (canon %init_peer_id% $results_test  #results_result_canon)
                                  )
                                  (ap #results_result_canon results_gate)
                                 )
                                )
                               )
                               (ap uris uris_to_functor-0)
                              )
                              (ap uris_to_functor-0.length uris_length-0)
                             )
                             (call %init_peer_id% ("math" "sub") [uris_length-0 1] sub-0)
                            )
                            (call %init_peer_id% ("peer" "timeout") [timeout ""])
                           )
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (xor
                          (seq
                           (seq
                            (canon quorumPeerId $results  #results_canon)
                            (call quorumPeerId ("quorum" "check") [#results_canon quorumNumber] quorumResult)
                           )
                           (call -relay- ("op" "noop") [])
                          )
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [quorumResult])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "quorum",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "uris" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "quorumNumber" : {
                    "tag" : "scalar",
                    "name" : "u32"
                },
                "timeout" : {
                    "tag" : "scalar",
                    "name" : "u32"
                },
                "method" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "jsonArgs" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "serviceId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "quorumServiceId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "quorumPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "callFunc" : {
                    "tag" : "arrow",
                    "domain" : {
                        "tag" : "unlabeledProduct",
                        "items" : [
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            },
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        ]
                    },
                    "codomain" : {
                        "tag" : "unlabeledProduct",
                        "items" : [
                            {
                                "tag" : "struct",
                                "name" : "JsonString",
                                "fields" : {
                                    "error" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "success" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    },
                                    "value" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        ]
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "QuorumResult",
                    "fields" : {
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "results" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "JsonString",
                                "fields" : {
                                    "error" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "success" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    },
                                    "value" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "value" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}


export function withSubnets(...args) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                                (call %init_peer_id% ("getDataSrv" "uris") [] uris)
                               )
                               (call %init_peer_id% ("getDataSrv" "method") [] method)
                              )
                              (call %init_peer_id% ("getDataSrv" "jsonArgs") [] jsonArgs)
                             )
                             (call %init_peer_id% ("json" "obj") ["chainNetwork" "testnet" "chainNetworkId" 80001.0 "dealId" "db94c6e5ce5313a5760b7d90527844a91889a9ee" "dealIdOriginal" "0xdB94c6E5CE5313A5760b7D90527844A91889A9Ee" "definition" "QmQSHQiDipuWWJwrZX3YQG2k3o768HuEjwkrxQo1UgSRtA" "installationSpells" [] "timestamp" "2023-02-27T10:38:09.025Z"] GetWorkersInfoDefaultWorker_obj)
                            )
                            (call %init_peer_id% ("json" "obj") ["defaultWorker" GetWorkersInfoDefaultWorker_obj] GetWorkersInfo_obj)
                           )
                           (ap GetWorkersInfo_obj.$.defaultWorker! GetWorkersInfo_obj_flat)
                          )
                          (ap GetWorkersInfo_obj_flat.$.dealId! GetWorkersInfo_obj_flat_flat)
                         )
                         (xor
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (seq
                                      (new $records
                                       (new $successful
                                        (new $result-0
                                         (seq
                                          (seq
                                           (seq
                                            (seq
                                             (seq
                                              (seq
                                               (seq
                                                (seq
                                                 (call -relay- ("insecure_sig" "get_peer_id") [] peer_id)
                                                 (call -relay- ("registry" "get_key_id") [GetWorkersInfo_obj_flat_flat peer_id] key_id)
                                                )
                                                (call -relay- ("op" "string_to_b58") [key_id] k)
                                               )
                                               (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                                              )
                                              (xor
                                               (par
                                                (fold nodes n-0
                                                 (par
                                                  (seq
                                                   (xor
                                                    (xor
                                                     (seq
                                                      (seq
                                                       (call n-0 ("peer" "timestamp_sec") [] t)
                                                       (call n-0 ("registry" "get_records") [key_id t] get_result)
                                                      )
                                                      (xor
                                                       (match get_result.$.success! true
                                                        (seq
                                                         (ap get_result.$.result! $records)
                                                         (ap true $successful)
                                                        )
                                                       )
                                                       (ap get_result.$.error! $error)
                                                      )
                                                     )
                                                     (call n-0 ("op" "noop") [])
                                                    )
                                                    (seq
                                                     (call -relay- ("op" "noop") [])
                                                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                                    )
                                                   )
                                                   (call -relay- ("op" "noop") [])
                                                  )
                                                  (next n-0)
                                                 )
                                                 (never)
                                                )
                                                (null)
                                               )
                                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                                              )
                                             )
                                             (new $status
                                              (new $result-1
                                               (seq
                                                (seq
                                                 (seq
                                                  (par
                                                   (seq
                                                    (seq
                                                     (seq
                                                      (call -relay- ("math" "sub") [2 1] sub)
                                                      (new $successful_test
                                                       (seq
                                                        (seq
                                                         (seq
                                                          (call -relay- ("math" "add") [sub 1] successful_incr)
                                                          (fold $successful s
                                                           (seq
                                                            (seq
                                                             (ap s $successful_test)
                                                             (canon -relay- $successful_test  #successful_iter_canon)
                                                            )
                                                            (xor
                                                             (match #successful_iter_canon.length successful_incr
                                                              (null)
                                                             )
                                                             (next s)
                                                            )
                                                           )
                                                           (never)
                                                          )
                                                         )
                                                         (canon -relay- $successful_test  #successful_result_canon)
                                                        )
                                                        (ap #successful_result_canon successful_gate)
                                                       )
                                                      )
                                                     )
                                                     (call -relay- ("math" "sub") [2 1] sub-0)
                                                    )
                                                    (ap "ok" $status)
                                                   )
                                                   (call -relay- ("peer" "timeout") [6000 "timeout"] $status)
                                                  )
                                                  (new $status_test
                                                   (seq
                                                    (seq
                                                     (seq
                                                      (call -relay- ("math" "add") [0 1] status_incr)
                                                      (fold $status s
                                                       (seq
                                                        (seq
                                                         (ap s $status_test)
                                                         (canon -relay- $status_test  #status_iter_canon)
                                                        )
                                                        (xor
                                                         (match #status_iter_canon.length status_incr
                                                          (null)
                                                         )
                                                         (next s)
                                                        )
                                                       )
                                                       (never)
                                                      )
                                                     )
                                                     (canon -relay- $status_test  #status_result_canon)
                                                    )
                                                    (ap #status_result_canon status_gate)
                                                   )
                                                  )
                                                 )
                                                 (xor
                                                  (match status_gate.$.[0]! "ok"
                                                   (ap true $result-1)
                                                  )
                                                  (ap false $result-1)
                                                 )
                                                )
                                                (new $result-1_test
                                                 (seq
                                                  (seq
                                                   (seq
                                                    (call -relay- ("math" "add") [0 1] result-1_incr)
                                                    (fold $result-1 s
                                                     (seq
                                                      (seq
                                                       (ap s $result-1_test)
                                                       (canon -relay- $result-1_test  #result-1_iter_canon)
                                                      )
                                                      (xor
                                                       (match #result-1_iter_canon.length result-1_incr
                                                        (null)
                                                       )
                                                       (next s)
                                                      )
                                                     )
                                                     (never)
                                                    )
                                                   )
                                                   (canon -relay- $result-1_test  #result-1_result_canon)
                                                  )
                                                  (ap #result-1_result_canon result-1_gate)
                                                 )
                                                )
                                               )
                                              )
                                             )
                                            )
                                            (xor
                                             (match result-1_gate.$.[0]! false
                                              (ap "timeout exceeded" $error)
                                             )
                                             (seq
                                              (seq
                                               (canon -relay- $records  #records_canon)
                                               (call -relay- ("registry" "merge") [#records_canon] merged)
                                              )
                                              (xor
                                               (match merged.$.success! false
                                                (ap merged.$.error! $error)
                                               )
                                               (ap merged.$.result! $result-0)
                                              )
                                             )
                                            )
                                           )
                                           (canon -relay- $result-0  #-result-fix-0)
                                          )
                                          (ap #-result-fix-0 -result-flat-0)
                                         )
                                        )
                                       )
                                      )
                                      (ap -result-flat-0.$.[0]! -result-flat-0_flat)
                                     )
                                     (ap -result-flat-0_flat -result-flat-0_flat_to_functor)
                                    )
                                    (ap -result-flat-0_flat_to_functor.length -result-flat-0_flat_length)
                                   )
                                   (call -relay- ("peer" "timestamp_sec") [] timestamp_sec)
                                  )
                                  (call -relay- ("op" "identity") [timestamp_sec] timeW)
                                 )
                                 (ap -result-flat-0.$.[0]! -result-flat-0_flat-0)
                                )
                                (ap -result-flat-0_flat-0 -result-flat-0_flat-0_to_functor)
                               )
                               (ap -result-flat-0_flat-0_to_functor.length -result-flat-0_flat-0_length)
                              )
                              (call -relay- ("math" "rem") [timeW -result-flat-0_flat-0_length] rem)
                             )
                             (null)
                            )
                            (fold -result-flat-0.$.[0].[rem].metadata.relay_id! -via-peer-
                             (seq
                              (call -via-peer- ("op" "noop") [])
                              (next -via-peer-)
                             )
                            )
                           )
                           (xor
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (seq
                                   (call -result-flat-0.$.[0].[rem].metadata.peer_id! ("peer" "timestamp_sec") [] timestamp_sec-0)
                                   (call -result-flat-0.$.[0].[rem].metadata.peer_id! ("op" "identity") [timestamp_sec-0] timeP)
                                  )
                                  (ap uris uris_to_functor)
                                 )
                                 (ap uris_to_functor.length uris_length)
                                )
                                (call -result-flat-0.$.[0].[rem].metadata.peer_id! ("math" "rem") [timeW uris_length] rem-0)
                               )
                               (call -result-flat-0.$.[0].[rem].metadata.peer_id! ("eth_rpc" "eth_call") [uris.$.[rem-0]! method jsonArgs] result)
                              )
                              (fold -result-flat-0.$.[0].[rem].metadata.relay_id! -via-peer-
                               (seq
                                (next -via-peer-)
                                (call -via-peer- ("op" "noop") [])
                               )
                              )
                             )
                             (call -relay- ("op" "noop") [])
                            )
                            (seq
                             (seq
                              (fold -result-flat-0.$.[0].[rem].metadata.relay_id! -via-peer-
                               (seq
                                (call -via-peer- ("op" "noop") [])
                                (next -via-peer-)
                               )
                              )
                              (call -relay- ("op" "noop") [])
                             )
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                            )
                           )
                          )
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                         )
                        )
                        (call %init_peer_id% ("logger" "logWorker") [-result-flat-0.$.[0].[rem]!])
                       )
                       (call %init_peer_id% ("logger" "logCall") [uris.$.[rem-0]!])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "withSubnets",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "uris" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "method" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "jsonArgs" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "JsonString",
                    "fields" : {
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "value" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}


export function roundRobin(...args) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                                (call %init_peer_id% ("getDataSrv" "uris") [] uris)
                               )
                               (call %init_peer_id% ("getDataSrv" "method") [] method)
                              )
                              (call %init_peer_id% ("getDataSrv" "jsonArgs") [] jsonArgs)
                             )
                             (call %init_peer_id% ("getDataSrv" "serviceId") [] serviceId)
                            )
                            (call %init_peer_id% ("getDataSrv" "counterServiceId") [] counterServiceId)
                           )
                           (call %init_peer_id% ("getDataSrv" "counterPeerId") [] counterPeerId)
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (xor
                          (call counterPeerId (counterServiceId "incrementAndReturn") [] requestNumber)
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                          )
                         )
                        )
                        (xor
                         (seq
                          (seq
                           (seq
                            (ap uris uris_to_functor)
                            (ap uris_to_functor.length uris_length)
                           )
                           (call %init_peer_id% ("math" "rem") [requestNumber uris_length] rem)
                          )
                          (call %init_peer_id% ("logger" "logCall") [uris.$.[rem]!])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                        )
                       )
                       (xor
                        (call %init_peer_id% ("callbackSrv" "callFunc") [uris.$.[rem]! method jsonArgs serviceId] init_call_res0)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [init_call_res0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "roundRobin",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "uris" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "method" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "jsonArgs" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "serviceId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "counterServiceId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "counterPeerId" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "callFunc" : {
                    "tag" : "arrow",
                    "domain" : {
                        "tag" : "unlabeledProduct",
                        "items" : [
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            },
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        ]
                    },
                    "codomain" : {
                        "tag" : "unlabeledProduct",
                        "items" : [
                            {
                                "tag" : "struct",
                                "name" : "JsonString",
                                "fields" : {
                                    "error" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "success" : {
                                        "tag" : "scalar",
                                        "name" : "bool"
                                    },
                                    "value" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        ]
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "JsonString",
                    "fields" : {
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "value" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}


export function call(...args) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "uri") [] uri)
                          )
                          (call %init_peer_id% ("getDataSrv" "method") [] method)
                         )
                         (call %init_peer_id% ("getDataSrv" "jsonArgs") [] jsonArgs)
                        )
                        (call %init_peer_id% ("getDataSrv" "serviceId") [] serviceId)
                       )
                       (xor
                        (call -relay- (serviceId "eth_call") [uri method jsonArgs] res)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "call",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "uri" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "method" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "jsonArgs" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "serviceId" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "JsonString",
                    "fields" : {
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "value" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

/* eslint-enable */